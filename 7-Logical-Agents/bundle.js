(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Agent = /** @class */ (function () {
    function Agent(grid) {
        this.mX = 1;
        this.mY = 1;
        this.mGame = grid;
        this.measure();
        this.ux = this.mGame.canvas.circle(20);
        this.ux.fill("#f06");
        this.ux.center(this.mGame.UX_SIZE / (2 * this.mGame.GRID_SIZE), this.mGame.UX_SIZE - (this.mGame.UX_SIZE / (2 * this.mGame.GRID_SIZE)));
    }
    Object.defineProperty(Agent.prototype, "x", {
        get: function () { return this.mX; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Agent.prototype, "y", {
        get: function () { return this.mY; },
        enumerable: true,
        configurable: true
    });
    Agent.prototype.move = function (move) {
        if (move === Move.Up && this.mY < this.mGame.GRID_SIZE) {
            this.mY += 1;
        }
        else if (move === Move.Down && this.mY > 1) {
            this.mY -= 1;
        }
        else if (move === Move.Right && this.mX < this.mGame.GRID_SIZE) {
            this.mX += 1;
        }
        else if (move === Move.Left && this.mX > 1) {
            this.mX -= 1;
        }
        this.render();
        this.measure();
        this.score();
    };
    Agent.prototype.measure = function () {
        this.mGame.getTile(this.x, this.y).measured = true;
        return this.mGame.getTile(this.x, this.y).measurement;
    };
    Agent.prototype.score = function () {
        var _this = this;
        var tile = this.mGame.getTile(this.mX, this.mY);
        if (tile.hasWumpus) {
            // Add text and a Rectangle behind it
            this.ux.animate().fill("#000000").radius(5);
            var rect_1 = this.mGame.canvas
                .rect(this.mGame.UX_SIZE, this.mGame.UX_SIZE / this.mGame.GRID_SIZE)
                .center(this.mGame.UX_SIZE / 2, this.mGame.UX_SIZE / 2).fill("#000000");
            var text_1 = this.mGame.canvas.text("Wumpus ate you.")
                .font({ family: "Helvetica", size: 60, fill: "white" })
                .center(this.mGame.UX_SIZE / 2, this.mGame.UX_SIZE / 2);
            // Reset the game 2 seconds later
            setTimeout(function () {
                _this.mGame.reset();
                rect_1.remove();
                text_1.remove();
            }, 2500);
        }
        else if (tile.hasPit) {
            this.ux.animate().fill("#000000").radius(5);
            // Add text and a Rectangle behind it
            var rect_2 = this.mGame.canvas
                .rect(this.mGame.UX_SIZE, this.mGame.UX_SIZE / this.mGame.GRID_SIZE)
                .center(this.mGame.UX_SIZE / 2, this.mGame.UX_SIZE / 2).fill("#000000");
            var text_2 = this.mGame.canvas.text("Oops, you fell in a Pit.")
                .font({ family: "Helvetica", size: 60, fill: "white" })
                .center(this.mGame.UX_SIZE / 2, this.mGame.UX_SIZE / 2);
            // Reset the game 2 seconds later
            setTimeout(function () {
                _this.mGame.reset();
                rect_2.remove();
                text_2.remove();
            }, 2500);
        }
        else if (tile.hasGold) {
            this.ux.animate().fill("#FFD000").radius(25);
            // Add text and a Rectangle behind it
            var rect_3 = this.mGame.canvas
                .rect(this.mGame.UX_SIZE, this.mGame.UX_SIZE / this.mGame.GRID_SIZE)
                .center(this.mGame.UX_SIZE / 2, this.mGame.UX_SIZE / 2).fill("#FFD000");
            var text_3 = this.mGame.canvas.text("You Won GOLD!.")
                .font({ family: "Helvetica", size: 60, fill: "black" })
                .center(this.mGame.UX_SIZE / 2, this.mGame.UX_SIZE / 2);
            // Reset the game 2 seconds later
            setTimeout(function () {
                _this.mGame.reset();
                rect_3.remove();
                text_3.remove();
            }, 2500);
        }
    };
    Agent.prototype.reset = function () {
        this.mX = 1;
        this.mY = 1;
        this.render();
        this.ux.finish();
        this.ux.fill("#f06");
        this.ux.radius(10);
    };
    Agent.prototype.render = function () {
        this.ux.finish();
        var BLOCK_SIZE = this.mGame.UX_SIZE / this.mGame.GRID_SIZE;
        this.ux.animate().center(BLOCK_SIZE * this.mX - BLOCK_SIZE / 2, this.mGame.UX_SIZE - BLOCK_SIZE * this.mY + BLOCK_SIZE / 2);
    };
    return Agent;
}());
exports.Agent = Agent;
var Move;
(function (Move) {
    Move[Move["Left"] = 0] = "Left";
    Move[Move["Right"] = 1] = "Right";
    Move[Move["Up"] = 2] = "Up";
    Move[Move["Down"] = 3] = "Down";
})(Move = exports.Move || (exports.Move = {}));

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var agent_1 = require("./agent");
var tile_1 = require("./tile");
var Grid = /** @class */ (function () {
    function Grid() {
        var _this = this;
        this.GRID_SIZE = 4;
        this.UX_SIZE = 600;
        this.tiles = [];
        for (var i = 0; i < this.GRID_SIZE; i++) {
            this.tiles[i] = [];
            for (var j = 0; j < this.GRID_SIZE; j++) {
                this.tiles[i][j] = new tile_1.Tile(i + 1, this.GRID_SIZE - j, this.UX_SIZE / this.GRID_SIZE);
            }
        }
        this.render();
        this.agent = new agent_1.Agent(this);
        // Binding the Keypress Event
        $("html").on("keydown", function (e) {
            if (e.which === 37 || e.which === "A".charCodeAt(0)) {
                _this.agent.move(agent_1.Move.Left);
            }
            else if (e.which === 38 || e.which === "W".charCodeAt(0)) {
                _this.agent.move(agent_1.Move.Up);
            }
            else if (e.which === 39 || e.which === "D".charCodeAt(0)) {
                _this.agent.move(agent_1.Move.Right);
            }
            else if (e.which === 40 || e.which === "S".charCodeAt(0)) {
                _this.agent.move(agent_1.Move.Down);
            }
        });
    }
    Grid.prototype.getTile = function (i, j) {
        i = i - 1;
        j = this.GRID_SIZE - j;
        if (i < 0 || j < 0 || i >= this.GRID_SIZE || j >= this.GRID_SIZE) {
            throw new Error("Accessing invalid tile index (" + i + "," + j + ")");
        }
        return this.tiles[i][j];
    };
    Grid.prototype.getNeighbors = function (tile) {
        var result = [];
        if (tile.x > 1) {
            result.push(this.getTile(tile.x - 1, tile.y));
        }
        if (tile.x < this.GRID_SIZE) {
            result.push(this.getTile(tile.x + 1, tile.y));
        }
        if (tile.y > 1) {
            result.push(this.getTile(tile.x, tile.y - 1));
        }
        if (tile.y < this.GRID_SIZE) {
            result.push(this.getTile(tile.x, tile.y + 1));
        }
        return result;
    };
    Grid.prototype.sensorUpdate = function () {
        // Loop over all tiles
        for (var i = 0; i < this.GRID_SIZE; i++) {
            for (var j = 0; j < this.GRID_SIZE; j++) {
                // Check if tile[i][j] has a breeze/stench due to a neighbors.
                var stench = false;
                var breeze = false;
                for (var _i = 0, _a = this.getNeighbors(this.tiles[i][j]); _i < _a.length; _i++) {
                    var neighbor = _a[_i];
                    stench = neighbor.hasWumpus || stench;
                    breeze = neighbor.hasPit || breeze;
                }
                // Set the measurement of the tile based on it's neighbors and render.
                this.tiles[i][j].measurement = breeze
                    ? (stench ? tile_1.Measurement.StenchyBreeze : tile_1.Measurement.Breeze)
                    : (stench ? tile_1.Measurement.Stench : tile_1.Measurement.Safe);
                this.tiles[i][j].render();
            }
        }
    };
    Grid.prototype.reset = function () {
        for (var i = 0; i < this.GRID_SIZE; i++) {
            for (var j = 0; j < this.GRID_SIZE; j++) {
                this.tiles[i][j].reset();
            }
        }
        this.getTile(1, 1).measured = true;
        this.agent.reset();
    };
    Grid.prototype.render = function () {
        this.canvas = SVG("drawing").size(this.UX_SIZE, this.UX_SIZE);
        var BLOCK_SIZE = this.UX_SIZE / this.GRID_SIZE;
        for (var i = 0; i < this.GRID_SIZE; i++) {
            for (var j = 0; j < this.GRID_SIZE; j++) {
                this.tiles[i][j].canvas = this.canvas.nested()
                    .attr({ x: BLOCK_SIZE * i, y: BLOCK_SIZE * j });
                this.tiles[i][j].render();
            }
        }
    };
    return Grid;
}());
exports.Grid = Grid;

},{"./agent":1,"./tile":4}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var grid_1 = require("./grid");
var game = new grid_1.Grid();
game.getTile(3, 1).hasPit = true;
game.getTile(3, 3).hasPit = true;
game.getTile(4, 4).hasPit = true;
game.getTile(1, 3).hasWumpus = true;
game.getTile(2, 3).hasGold = true;
game.sensorUpdate();

},{"./grid":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Tile = /** @class */ (function () {
    function Tile(x, y, blockSize) {
        if (blockSize === void 0) { blockSize = 100; }
        this.mX = x;
        this.mY = y;
        this.mWumpus = false;
        this.mPit = false;
        this.mGold = false;
        this.BLOCK_SIZE = blockSize;
        this.mMeasurement = Measurement.Safe;
        this.mMeasured = false;
    }
    Object.defineProperty(Tile.prototype, "canvas", {
        set: function (canvas) { this.mCanvas = canvas; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tile.prototype, "x", {
        get: function () { return this.mX; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tile.prototype, "y", {
        get: function () { return this.mY; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tile.prototype, "hasWumpus", {
        get: function () { return this.mWumpus; },
        set: function (wumpus) { this.mWumpus = wumpus; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tile.prototype, "hasPit", {
        get: function () { return this.mPit; },
        set: function (pit) { this.mPit = pit; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tile.prototype, "hasGold", {
        get: function () { return this.mGold; },
        set: function (gold) { this.mGold = gold; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tile.prototype, "measurement", {
        set: function (measurement) {
            this.mMeasurement = measurement;
            this.render();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tile.prototype, "measured", {
        set: function (measured) {
            this.mMeasured = measured;
            this.render();
        },
        enumerable: true,
        configurable: true
    });
    Tile.prototype.reset = function () {
        this.measured = false;
    };
    Tile.prototype.render = function () {
        var rOut = this.mCanvas.rect(this.BLOCK_SIZE * 0.98, this.BLOCK_SIZE * 0.98);
        var rInn = this.mCanvas.rect(this.BLOCK_SIZE * 0.75, this.BLOCK_SIZE * 0.75);
        if (this.mMeasured) {
            rOut.fill({ color: this.mMeasurement });
        }
        else {
            rOut.fill({ color: "#ccc" });
        }
        rInn.fill({ color: "#ddd" });
        rOut.center(this.BLOCK_SIZE / 2, this.BLOCK_SIZE / 2);
        rInn.center(this.BLOCK_SIZE / 2, this.BLOCK_SIZE / 2);
    };
    return Tile;
}());
exports.Tile = Tile;
var Measurement;
(function (Measurement) {
    Measurement["Stench"] = "#ff0000";
    Measurement["Breeze"] = "#000000";
    Measurement["StenchyBreeze"] = "#660000";
    Measurement["Safe"] = "#55ff66";
})(Measurement = exports.Measurement || (exports.Measurement = {}));

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhZ2VudC50cyIsImdyaWQudHMiLCJtYWluLnRzIiwidGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDR0E7SUFPRSxlQUFZLElBQVU7UUFDcEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDWixJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQzVELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELHNCQUFJLG9CQUFDO2FBQUwsY0FBa0IsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFDbkMsc0JBQUksb0JBQUM7YUFBTCxjQUFrQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUU1QixvQkFBSSxHQUFYLFVBQVksSUFBVTtRQUNwQixJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxF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O1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUNILFdBQUM7QUFBRCxDQTFEQSxBQTBEQyxJQUFBO0FBMURZLG9CQUFJO0FBNERqQixJQUFZLFdBS1g7QUFMRCxXQUFZLFdBQVc7SUFDckIsaUNBQWtCLENBQUE7SUFDbEIsaUNBQWtCLENBQUE7SUFDbEIsd0NBQXlCLENBQUE7SUFDekIsK0JBQWdCLENBQUE7QUFDbEIsQ0FBQyxFQUxXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBS3RCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiaW1wb3J0IHsgR3JpZCB9IGZyb20gXCIuL2dyaWRcIjtcbmltcG9ydCB7IE1lYXN1cmVtZW50IH0gZnJvbSBcIi4vdGlsZVwiO1xuXG5leHBvcnQgY2xhc3MgQWdlbnQge1xuXG4gIHByb3RlY3RlZCBtWDogbnVtYmVyO1xuICBwcm90ZWN0ZWQgbVk6IG51bWJlcjtcbiAgcHJpdmF0ZSBtR2FtZTogR3JpZDtcbiAgcHJpdmF0ZSB1eDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKGdyaWQ6IEdyaWQpIHtcbiAgICB0aGlzLm1YID0gMTtcbiAgICB0aGlzLm1ZID0gMTtcbiAgICB0aGlzLm1HYW1lID0gZ3JpZDtcbiAgICB0aGlzLm1lYXN1cmUoKTtcbiAgICB0aGlzLnV4ID0gdGhpcy5tR2FtZS5jYW52YXMuY2lyY2xlKDIwKTtcbiAgICB0aGlzLnV4LmZpbGwoXCIjZjA2XCIpO1xuICAgIHRoaXMudXguY2VudGVyKHRoaXMubUdhbWUuVVhfU0laRSAvICgyICogdGhpcy5tR2FtZS5HUklEX1NJWkUpLFxuICAgICAgdGhpcy5tR2FtZS5VWF9TSVpFIC0gKHRoaXMubUdhbWUuVVhfU0laRSAvICgyICogdGhpcy5tR2FtZS5HUklEX1NJWkUpKSk7XG4gIH1cblxuICBnZXQgeCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5tWDsgfVxuICBnZXQgeSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5tWTsgfVxuXG4gIHB1YmxpYyBtb3ZlKG1vdmU6IE1vdmUpOiB2b2lkIHtcbiAgICBpZiAobW92ZSA9PT0gTW92ZS5VcCAmJiB0aGlzLm1ZIDwgdGhpcy5tR2FtZS5HUklEX1NJWkUpIHtcbiAgICAgIHRoaXMubVkgKz0gMTtcbiAgICB9IGVsc2UgaWYgKG1vdmUgPT09IE1vdmUuRG93biAmJiB0aGlzLm1ZID4gMSkge1xuICAgICAgdGhpcy5tWSAtPSAxO1xuICAgIH0gZWxzZSBpZiAobW92ZSA9PT0gTW92ZS5SaWdodCAmJiB0aGlzLm1YIDwgdGhpcy5tR2FtZS5HUklEX1NJWkUpIHtcbiAgICAgIHRoaXMubVggKz0gMTtcbiAgICB9IGVsc2UgaWYgKG1vdmUgPT09IE1vdmUuTGVmdCAmJiB0aGlzLm1YID4gMSkge1xuICAgICAgdGhpcy5tWCAtPSAxO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMubWVhc3VyZSgpO1xuICAgIHRoaXMuc2NvcmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBtZWFzdXJlKCk6IE1lYXN1cmVtZW50IHtcbiAgICB0aGlzLm1HYW1lLmdldFRpbGUodGhpcy54LCB0aGlzLnkpLm1lYXN1cmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5tR2FtZS5nZXRUaWxlKHRoaXMueCwgdGhpcy55KS5tZWFzdXJlbWVudDtcbiAgfVxuXG4gIHB1YmxpYyBzY29yZSgpOiB2b2lkIHtcbiAgICBjb25zdCB0aWxlID0gdGhpcy5tR2FtZS5nZXRUaWxlKHRoaXMubVgsIHRoaXMubVkpO1xuICAgIGlmICh0aWxlLmhhc1d1bXB1cykge1xuICAgICAgLy8gQWRkIHRleHQgYW5kIGEgUmVjdGFuZ2xlIGJlaGluZCBpdFxuICAgICAgdGhpcy51eC5hbmltYXRlKCkuZmlsbChcIiMwMDAwMDBcIikucmFkaXVzKDUpO1xuICAgICAgY29uc3QgcmVjdCA9IHRoaXMubUdhbWUuY2FudmFzXG4gICAgICAgIC5yZWN0KHRoaXMubUdhbWUuVVhfU0laRSwgdGhpcy5tR2FtZS5VWF9TSVpFIC8gdGhpcy5tR2FtZS5HUklEX1NJWkUpXG4gICAgICAgIC5jZW50ZXIodGhpcy5tR2FtZS5VWF9TSVpFIC8gMiwgdGhpcy5tR2FtZS5VWF9TSVpFIC8gMikuZmlsbChcIiMwMDAwMDBcIik7XG4gICAgICBjb25zdCB0ZXh0ID0gdGhpcy5tR2FtZS5jYW52YXMudGV4dChcIld1bXB1cyBhdGUgeW91LlwiKVxuICAgICAgICAuZm9udCh7IGZhbWlseTogXCJIZWx2ZXRpY2FcIiwgc2l6ZTogNjAsIGZpbGw6IFwid2hpdGVcIiB9KVxuICAgICAgICAuY2VudGVyKHRoaXMubUdhbWUuVVhfU0laRSAvIDIsIHRoaXMubUdhbWUuVVhfU0laRSAvIDIpO1xuICAgICAgLy8gUmVzZXQgdGhlIGdhbWUgMiBzZWNvbmRzIGxhdGVyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5tR2FtZS5yZXNldCgpO1xuICAgICAgICByZWN0LnJlbW92ZSgpO1xuICAgICAgICB0ZXh0LnJlbW92ZSgpO1xuICAgICAgfSwgMjUwMCk7XG4gICAgfSBlbHNlIGlmICh0aWxlLmhhc1BpdCkge1xuICAgICAgdGhpcy51eC5hbmltYXRlKCkuZmlsbChcIiMwMDAwMDBcIikucmFkaXVzKDUpO1xuICAgICAgLy8gQWRkIHRleHQgYW5kIGEgUmVjdGFuZ2xlIGJlaGluZCBpdFxuICAgICAgY29uc3QgcmVjdCA9IHRoaXMubUdhbWUuY2FudmFzXG4gICAgICAgIC5yZWN0KHRoaXMubUdhbWUuVVhfU0laRSwgdGhpcy5tR2FtZS5VWF9TSVpFIC8gdGhpcy5tR2FtZS5HUklEX1NJWkUpXG4gICAgICAgIC5jZW50ZXIodGhpcy5tR2FtZS5VWF9TSVpFIC8gMiwgdGhpcy5tR2FtZS5VWF9TSVpFIC8gMikuZmlsbChcIiMwMDAwMDBcIik7XG4gICAgICBjb25zdCB0ZXh0ID0gdGhpcy5tR2FtZS5jYW52YXMudGV4dChcIk9vcHMsIHlvdSBmZWxsIGluIGEgUGl0LlwiKVxuICAgICAgICAuZm9udCh7IGZhbWlseTogXCJIZWx2ZXRpY2FcIiwgc2l6ZTogNjAsIGZpbGw6IFwid2hpdGVcIiB9KVxuICAgICAgICAuY2VudGVyKHRoaXMubUdhbWUuVVhfU0laRSAvIDIsIHRoaXMubUdhbWUuVVhfU0laRSAvIDIpO1xuICAgICAgLy8gUmVzZXQgdGhlIGdhbWUgMiBzZWNvbmRzIGxhdGVyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5tR2FtZS5yZXNldCgpO1xuICAgICAgICByZWN0LnJlbW92ZSgpO1xuICAgICAgICB0ZXh0LnJlbW92ZSgpO1xuICAgICAgfSwgMjUwMCk7XG4gICAgfSBlbHNlIGlmICh0aWxlLmhhc0dvbGQpIHtcbiAgICAgIHRoaXMudXguYW5pbWF0ZSgpLmZpbGwoXCIjRkZEMDAwXCIpLnJhZGl1cygyNSk7XG4gICAgICAvLyBBZGQgdGV4dCBhbmQgYSBSZWN0YW5nbGUgYmVoaW5kIGl0XG4gICAgICBjb25zdCByZWN0ID0gdGhpcy5tR2FtZS5jYW52YXNcbiAgICAgICAgLnJlY3QodGhpcy5tR2FtZS5VWF9TSVpFLCB0aGlzLm1HYW1lLlVYX1NJWkUgLyB0aGlzLm1HYW1lLkdSSURfU0laRSlcbiAgICAgICAgLmNlbnRlcih0aGlzLm1HYW1lLlVYX1NJWkUgLyAyLCB0aGlzLm1HYW1lLlVYX1NJWkUgLyAyKS5maWxsKFwiI0ZGRDAwMFwiKTtcbiAgICAgIGNvbnN0IHRleHQgPSB0aGlzLm1HYW1lLmNhbnZhcy50ZXh0KFwiWW91IFdvbiBHT0xEIS5cIilcbiAgICAgICAgLmZvbnQoeyBmYW1pbHk6IFwiSGVsdmV0aWNhXCIsIHNpemU6IDYwLCBmaWxsOiBcImJsYWNrXCIgfSlcbiAgICAgICAgLmNlbnRlcih0aGlzLm1HYW1lLlVYX1NJWkUgLyAyLCB0aGlzLm1HYW1lLlVYX1NJWkUgLyAyKTtcbiAgICAgIC8vIFJlc2V0IHRoZSBnYW1lIDIgc2Vjb25kcyBsYXRlclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMubUdhbWUucmVzZXQoKTtcbiAgICAgICAgcmVjdC5yZW1vdmUoKTtcbiAgICAgICAgdGV4dC5yZW1vdmUoKTtcbiAgICAgIH0sIDI1MDApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLm1YID0gMTtcbiAgICB0aGlzLm1ZID0gMTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMudXguZmluaXNoKCk7XG4gICAgdGhpcy51eC5maWxsKFwiI2YwNlwiKTtcbiAgICB0aGlzLnV4LnJhZGl1cygxMCk7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgIHRoaXMudXguZmluaXNoKCk7XG4gICAgY29uc3QgQkxPQ0tfU0laRSA9IHRoaXMubUdhbWUuVVhfU0laRSAvIHRoaXMubUdhbWUuR1JJRF9TSVpFO1xuICAgIHRoaXMudXguYW5pbWF0ZSgpLmNlbnRlcihCTE9DS19TSVpFICogdGhpcy5tWCAtIEJMT0NLX1NJWkUgLyAyLFxuICAgICAgdGhpcy5tR2FtZS5VWF9TSVpFIC0gQkxPQ0tfU0laRSAqIHRoaXMubVkgKyBCTE9DS19TSVpFIC8gMik7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gTW92ZSB7XG4gIExlZnQsIFJpZ2h0LCBVcCwgRG93bixcbn1cbiIsImltcG9ydCB7IEFnZW50LCBNb3ZlIH0gZnJvbSBcIi4vYWdlbnRcIjtcbmltcG9ydCB7IE1lYXN1cmVtZW50LCBUaWxlIH0gZnJvbSBcIi4vdGlsZVwiO1xuXG5kZWNsYXJlIHZhciAkOiBhbnk7XG5kZWNsYXJlIHZhciBTVkc6IGFueTtcblxuZXhwb3J0IGNsYXNzIEdyaWQge1xuXG4gIHB1YmxpYyByZWFkb25seSBHUklEX1NJWkU6IG51bWJlciA9IDQ7XG4gIHB1YmxpYyByZWFkb25seSBVWF9TSVpFOiBudW1iZXIgPSA2MDA7XG4gIHB1YmxpYyBhZ2VudDogQWdlbnQ7XG4gIHB1YmxpYyB0aWxlczogVGlsZVtdW10gPSBbXTtcbiAgcHVibGljIGNhbnZhczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5HUklEX1NJWkU7IGkrKykge1xuICAgICAgdGhpcy50aWxlc1tpXSA9IFtdO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLkdSSURfU0laRTsgaisrKSB7XG4gICAgICAgIHRoaXMudGlsZXNbaV1bal0gPSBuZXcgVGlsZShpICsgMSwgdGhpcy5HUklEX1NJWkUgLSBqLFxuICAgICAgICAgIHRoaXMuVVhfU0laRSAvIHRoaXMuR1JJRF9TSVpFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLmFnZW50ID0gbmV3IEFnZW50KHRoaXMpO1xuICAgIC8vIEJpbmRpbmcgdGhlIEtleXByZXNzIEV2ZW50XG4gICAgJChcImh0bWxcIikub24oXCJrZXlkb3duXCIsIChlOiBhbnkpID0+IHtcbiAgICAgIGlmIChlLndoaWNoID09PSAzNyB8fCBlLndoaWNoID09PSBcIkFcIi5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgIHRoaXMuYWdlbnQubW92ZShNb3ZlLkxlZnQpO1xuICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09PSAzOCB8fCBlLndoaWNoID09PSBcIldcIi5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgIHRoaXMuYWdlbnQubW92ZShNb3ZlLlVwKTtcbiAgICAgIH0gZWxzZSBpZiAoZS53aGljaCA9PT0gMzkgfHwgZS53aGljaCA9PT0gXCJEXCIuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICB0aGlzLmFnZW50Lm1vdmUoTW92ZS5SaWdodCk7XG4gICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDQwIHx8IGUud2hpY2ggPT09IFwiU1wiLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgdGhpcy5hZ2VudC5tb3ZlKE1vdmUuRG93bik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0VGlsZShpOiBudW1iZXIsIGo6IG51bWJlcik6IFRpbGUge1xuICAgIGkgPSBpIC0gMTtcbiAgICBqID0gdGhpcy5HUklEX1NJWkUgLSBqO1xuICAgIGlmIChpIDwgMCB8fCBqIDwgMCB8fCBpID49IHRoaXMuR1JJRF9TSVpFIHx8IGogPj0gdGhpcy5HUklEX1NJWkUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkFjY2Vzc2luZyBpbnZhbGlkIHRpbGUgaW5kZXggKFwiICsgaSArIFwiLFwiICsgaiArIFwiKVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGlsZXNbaV1bal07XG4gIH1cblxuICBwdWJsaWMgZ2V0TmVpZ2hib3JzKHRpbGU6IFRpbGUpOiBUaWxlW10ge1xuICAgIGNvbnN0IHJlc3VsdDogVGlsZVtdID0gW107XG4gICAgaWYgKHRpbGUueCA+IDEpIHtcbiAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZXRUaWxlKHRpbGUueCAtIDEsIHRpbGUueSkpO1xuICAgIH1cbiAgICBpZiAodGlsZS54IDwgdGhpcy5HUklEX1NJWkUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2V0VGlsZSh0aWxlLnggKyAxLCB0aWxlLnkpKTtcbiAgICB9XG4gICAgaWYgKHRpbGUueSA+IDEpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2V0VGlsZSh0aWxlLngsIHRpbGUueSAtIDEpKTtcbiAgICB9XG4gICAgaWYgKHRpbGUueSA8IHRoaXMuR1JJRF9TSVpFKSB7XG4gICAgICByZXN1bHQucHVzaCh0aGlzLmdldFRpbGUodGlsZS54LCB0aWxlLnkgKyAxKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwdWJsaWMgc2Vuc29yVXBkYXRlKCkge1xuICAgIC8vIExvb3Agb3ZlciBhbGwgdGlsZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuR1JJRF9TSVpFOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5HUklEX1NJWkU7IGorKykge1xuICAgICAgICAvLyBDaGVjayBpZiB0aWxlW2ldW2pdIGhhcyBhIGJyZWV6ZS9zdGVuY2ggZHVlIHRvIGEgbmVpZ2hib3JzLlxuICAgICAgICBsZXQgc3RlbmNoOiBib29sZWFuID0gZmFsc2U7XG4gICAgICAgIGxldCBicmVlemU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBuZWlnaGJvciBvZiB0aGlzLmdldE5laWdoYm9ycyh0aGlzLnRpbGVzW2ldW2pdKSkge1xuICAgICAgICAgIHN0ZW5jaCA9IG5laWdoYm9yLmhhc1d1bXB1cyB8fCBzdGVuY2g7XG4gICAgICAgICAgYnJlZXplID0gbmVpZ2hib3IuaGFzUGl0IHx8IGJyZWV6ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgdGhlIG1lYXN1cmVtZW50IG9mIHRoZSB0aWxlIGJhc2VkIG9uIGl0J3MgbmVpZ2hib3JzIGFuZCByZW5kZXIuXG4gICAgICAgIHRoaXMudGlsZXNbaV1bal0ubWVhc3VyZW1lbnQgPSBicmVlemVcbiAgICAgICAgICA/IChzdGVuY2ggPyBNZWFzdXJlbWVudC5TdGVuY2h5QnJlZXplIDogTWVhc3VyZW1lbnQuQnJlZXplKVxuICAgICAgICAgIDogKHN0ZW5jaCA/IE1lYXN1cmVtZW50LlN0ZW5jaCA6IE1lYXN1cmVtZW50LlNhZmUpO1xuICAgICAgICB0aGlzLnRpbGVzW2ldW2pdLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuR1JJRF9TSVpFOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5HUklEX1NJWkU7IGorKykge1xuICAgICAgICB0aGlzLnRpbGVzW2ldW2pdLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZ2V0VGlsZSgxLCAxKS5tZWFzdXJlZCA9IHRydWU7XG4gICAgdGhpcy5hZ2VudC5yZXNldCgpO1xuICB9XG5cbiAgcHVibGljIHJlbmRlcigpIHtcbiAgICB0aGlzLmNhbnZhcyA9IFNWRyhcImRyYXdpbmdcIikuc2l6ZSh0aGlzLlVYX1NJWkUsIHRoaXMuVVhfU0laRSk7XG4gICAgY29uc3QgQkxPQ0tfU0laRTogbnVtYmVyID0gdGhpcy5VWF9TSVpFIC8gdGhpcy5HUklEX1NJWkU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLkdSSURfU0laRTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuR1JJRF9TSVpFOyBqKyspIHtcbiAgICAgICAgdGhpcy50aWxlc1tpXVtqXS5jYW52YXMgPSB0aGlzLmNhbnZhcy5uZXN0ZWQoKVxuICAgICAgICAgIC5hdHRyKHsgeDogQkxPQ0tfU0laRSAqIGksIHk6IEJMT0NLX1NJWkUgKiBqIH0pO1xuICAgICAgICB0aGlzLnRpbGVzW2ldW2pdLnJlbmRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSIsImltcG9ydCB7IEdyaWQgfSBmcm9tIFwiLi9ncmlkXCI7XG5cbmNvbnN0IGdhbWU6IEdyaWQgPSBuZXcgR3JpZCgpO1xuZ2FtZS5nZXRUaWxlKDMsIDEpLmhhc1BpdCA9IHRydWU7XG5nYW1lLmdldFRpbGUoMywgMykuaGFzUGl0ID0gdHJ1ZTtcbmdhbWUuZ2V0VGlsZSg0LCA0KS5oYXNQaXQgPSB0cnVlO1xuZ2FtZS5nZXRUaWxlKDEsIDMpLmhhc1d1bXB1cyA9IHRydWU7XG5nYW1lLmdldFRpbGUoMiwgMykuaGFzR29sZCA9IHRydWU7XG5nYW1lLnNlbnNvclVwZGF0ZSgpO1xuIiwiaW1wb3J0IHsgR3JpZCB9IGZyb20gXCIuL2dyaWRcIjtcblxuZXhwb3J0IGNsYXNzIFRpbGUge1xuXG4gIHByb3RlY3RlZCBtV3VtcHVzOiBib29sZWFuO1xuICBwcm90ZWN0ZWQgbVBpdDogYm9vbGVhbjtcbiAgcHJvdGVjdGVkIG1Hb2xkOiBib29sZWFuO1xuICBwcm90ZWN0ZWQgbUNhbnZhczogYW55O1xuICBwcml2YXRlIHJlYWRvbmx5IEJMT0NLX1NJWkU6IG51bWJlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBtWDogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IG1ZOiBudW1iZXI7XG4gIHByaXZhdGUgbU1lYXN1cmVtZW50OiBNZWFzdXJlbWVudDtcbiAgcHJpdmF0ZSBtTWVhc3VyZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIGJsb2NrU2l6ZTogbnVtYmVyID0gMTAwKSB7XG4gICAgdGhpcy5tWCA9IHg7XG4gICAgdGhpcy5tWSA9IHk7XG4gICAgdGhpcy5tV3VtcHVzID0gZmFsc2U7XG4gICAgdGhpcy5tUGl0ID0gZmFsc2U7XG4gICAgdGhpcy5tR29sZCA9IGZhbHNlO1xuICAgIHRoaXMuQkxPQ0tfU0laRSA9IGJsb2NrU2l6ZTtcbiAgICB0aGlzLm1NZWFzdXJlbWVudCA9IE1lYXN1cmVtZW50LlNhZmU7XG4gICAgdGhpcy5tTWVhc3VyZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHNldCBjYW52YXMoY2FudmFzOiBhbnkpIHsgdGhpcy5tQ2FudmFzID0gY2FudmFzOyB9XG4gIGdldCB4KCk6IG51bWJlciB7IHJldHVybiB0aGlzLm1YOyB9XG4gIGdldCB5KCk6IG51bWJlciB7IHJldHVybiB0aGlzLm1ZOyB9XG4gIHNldCBoYXNXdW1wdXMod3VtcHVzOiBib29sZWFuKSB7IHRoaXMubVd1bXB1cyA9IHd1bXB1czsgfVxuICBnZXQgaGFzV3VtcHVzKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5tV3VtcHVzOyB9XG4gIHNldCBoYXNQaXQocGl0OiBib29sZWFuKSB7IHRoaXMubVBpdCA9IHBpdDsgfVxuICBnZXQgaGFzUGl0KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5tUGl0OyB9XG4gIHNldCBoYXNHb2xkKGdvbGQ6IGJvb2xlYW4pIHsgdGhpcy5tR29sZCA9IGdvbGQ7IH1cbiAgZ2V0IGhhc0dvbGQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLm1Hb2xkOyB9XG5cbiAgc2V0IG1lYXN1cmVtZW50KG1lYXN1cmVtZW50OiBNZWFzdXJlbWVudCkge1xuICAgIHRoaXMubU1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnQ7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBzZXQgbWVhc3VyZWQobWVhc3VyZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm1NZWFzdXJlZCA9IG1lYXN1cmVkO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgdGhpcy5tZWFzdXJlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcbiAgICBjb25zdCByT3V0ID0gdGhpcy5tQ2FudmFzLnJlY3QodGhpcy5CTE9DS19TSVpFICogMC45OCwgdGhpcy5CTE9DS19TSVpFICogMC45OCk7XG4gICAgY29uc3QgcklubiA9IHRoaXMubUNhbnZhcy5yZWN0KHRoaXMuQkxPQ0tfU0laRSAqIDAuNzUsIHRoaXMuQkxPQ0tfU0laRSAqIDAuNzUpO1xuICAgIGlmICh0aGlzLm1NZWFzdXJlZCkge1xuICAgICAgck91dC5maWxsKHsgY29sb3I6IHRoaXMubU1lYXN1cmVtZW50IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByT3V0LmZpbGwoeyBjb2xvcjogXCIjY2NjXCIgfSk7XG4gICAgfVxuICAgIHJJbm4uZmlsbCh7IGNvbG9yOiBcIiNkZGRcIiB9KTtcbiAgICByT3V0LmNlbnRlcih0aGlzLkJMT0NLX1NJWkUgLyAyLCB0aGlzLkJMT0NLX1NJWkUgLyAyKTtcbiAgICBySW5uLmNlbnRlcih0aGlzLkJMT0NLX1NJWkUgLyAyLCB0aGlzLkJMT0NLX1NJWkUgLyAyKTtcbiAgfVxufVxuXG5leHBvcnQgZW51bSBNZWFzdXJlbWVudCB7XG4gIFN0ZW5jaCA9IFwiI2ZmMDAwMFwiLFxuICBCcmVlemUgPSBcIiMwMDAwMDBcIixcbiAgU3RlbmNoeUJyZWV6ZSA9IFwiIzY2MDAwMFwiLFxuICBTYWZlID0gXCIjNTVmZjY2XCIsXG59XG4iXX0=
